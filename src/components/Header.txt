import React, { useState, useEffect } from 'react';
import { Menu, X, Home, Info, Calendar, Users, Mail } from 'lucide-react';
import Codewavelogo from '../assets/Logo_Orginal.png';
import { ThemeToggleButton } from './ThemeToggle';
import MobileNavbar from './MobileNavbar';
import darkThemeLogo from "../assets/DarkThemeLogo.png"
import lightThemeLogo from "../assets/LightThemeLogo.png"

const navItems = [
  { label: 'Home', href: '/', icon: <Home size={22} /> },
  { label: 'About Us', href: '/about', icon: <Info size={22} /> },
  { label: 'Services', href: '/services', icon: <Calendar size={22} /> },
  { label: 'Tools', href: '/tools', icon: <Users size={22} /> },
  // { label: 'Portfolio', href: '/portfolio', icon: <Users size={22} /> },
  { label: 'Contact', href: '/contact', icon: <Mail size={22} /> },
];

const Header: React.FC = () => {
  const [isScrolled, setIsScrolled] = useState(false);
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [showCalendly, setShowCalendly] = useState(false);
  const [theme, setTheme] = useState<'light' | 'dark'>('dark');

  useEffect(() => {
    // Get theme from html class
    const html = document.documentElement;
    const observer = new MutationObserver(() => {
      setTheme(html.classList.contains('light') ? 'light' : 'dark');
    });
    observer.observe(html, { attributes: true, attributeFilter: ['class'] });
    setTheme(html.classList.contains('light') ? 'light' : 'dark');
    return () => observer.disconnect();
  }, []);

  useEffect(() => {
    const handleScroll = () => {
      setIsScrolled(window.scrollY > 50);
    };
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const handleCalendlyClick = (e: React.MouseEvent) => {
    e.preventDefault();
    setShowCalendly(true);
  };

  return (
    <>
      {/* Mobile Navbar - Always visible */}
      <MobileNavbar onOpenMenu={() => setIsMobileMenuOpen(true)} />

      {/* Main Header - Desktop only */}
      <header className={`fixed top-0 left-0 right-0 z-40 transition-all duration-500 hidden md:block ${isScrolled ? 'pointer-events-none opacity-0' : ''}`}>
        <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="grid grid-cols-2 md:grid-cols-3 items-center w-full">
            {/* Logo Section - left (rectangular) */}
            <div className="flex items-center justify-start col-start-1">
              <a href="/" className="flex items-center" aria-label="CodeWave home">
                <div
                  className="relative flex items-center gap-3 px-3 py-2 rounded-lg transition-transform duration-300 hover:scale-105 "
                  style={{
                    // border: '1.5px solid var(--logo-border)',
                    // background: 'var(--logo-bg)', // Removed background color
                    // backdropFilter: 'blur(6px)', // Removed blur
                  }}
                >
                  {/* animated rectangular gradient overlay (matches WhyUsSection) */}
                  {/* <div className="absolute inset-0 rounded-lg overflow-hidden pointer-events-none" style={{ zIndex: 0 }}>
                    <div className="w-full h-full bg-gradient-to-br from-transparent via-[var(--accent-primary)]/20 to-transparent animate-pulse-premium" />
                  </div> */}
                  <img
                    src={theme === 'dark' ? darkThemeLogo : lightThemeLogo}
                    alt="CodeWave"
                    className="h-28 w-auto object-contain relative z-10"
                    style={{ display: 'block' }}
                  />
                </div>
              </a>
            </div>

            {/* Navigation - center (hidden on small) */}
            <nav className="hidden md:flex justify-center col-start-2 md:col-start-2">
              <div className="inline-flex items-center gap-1 p-1.5 rounded-full bg-[var(--card-bg)] border border-[var(--card-border)] backdrop-blur-sm">
                {navItems.map((item) => (
                  <a
                    key={item.label}
                    href={item.href}
                    className="relative font-medium hover:text-white text-[var(--text-secondary)] px-4 py-2 rounded-full transition-all duration-300 hover:bg-gradient-to-r hover:from-[var(--accent-primary)] hover:to-[var(--accent-secondary)] group nav-link-hover-white"
                    
                  >
                    <span className="relative z-10 text-nowrap ">{item.label}</span>
                    <span className="absolute inset-0 rounded-full bg-gradient-to-r from-[var(--accent-primary)] to-[var(--accent-secondary)] opacity-0 group-hover:opacity-10 transition-opacity duration-300"></span>
                  </a>
                ))}
                {/* Theme toggle button in navigation */}
                <span className="ml-2">
                  <ThemeToggleButton />
                </span>
              </div>
            </nav>

            {/* CTA Button and Mobile Menu Icon - right */}
            <div className="flex items-center justify-end gap-4 col-start-2 md:col-start-3">
              {/* Theme toggle placed before CTA/menu */}
              

              <button
                onClick={handleCalendlyClick}
                className="hidden md:flex items-center gap-2 px-4 py-2 rounded-full font-medium text-sm transition-all duration-300 hover:scale-105"
                style={{
                  background: 'linear-gradient(135deg, var(--accent-primary), var(--accent-secondary))',
                  color: 'white',
                  boxShadow: '0 4px 15px rgba(var(--accent-primary-rgb), 0.3)',
                }}
              >
                <span className="px-1">Book a Call</span>
                <span className="flex items-center justify-center w-7 h-7 rounded-full bg-white/20">
                  â†’
                </span>
              </button>
              {/* Add mobile menu icon */}
              <button
                className="md:hidden flex items-center justify-center w-10 h-10 rounded-full bg-[var(--card-bg)] border border-[var(--card-border)]"
                onClick={() => setIsMobileMenuOpen(true)}
                aria-label="Open menu"
              >
                <Menu size={26} />
              </button>
            </div>
          </div>
        </div>
      </header>
      {/* Mobile Menu Overlay */}
      {isMobileMenuOpen && (
        <div className="fixed inset-0 z-[100] flex md:hidden">
          <div className="absolute inset-0 bg-black/60 backdrop-blur-sm" onClick={() => setIsMobileMenuOpen(false)} />
          <div className="relative w-[85%] max-w-md mx-auto my-20 bg-[var(--card-bg)] shadow-2xl animate-fade-in-up rounded-2xl overflow-hidden">
            <div className="flex flex-col p-6">
              <div className="flex items-center justify-between mb-6">
                <img src={theme === 'dark' ? darkThemeLogo : lightThemeLogo} alt="CodeWave" className="h-8" />
                <button 
                  onClick={() => setIsMobileMenuOpen(false)}
                  className="p-2 rounded-full text-[var(--text-secondary)] hover:bg-[var(--card-border)]"
                >
                  <X size={24} />
                </button>
              </div>
              <nav className="flex flex-col gap-2 max-h-[60vh] overflow-y-auto">
                {navItems.map((item) => (
                  <a
                    key={item.label}
                    href={item.href}
                    className="flex items-center gap-3 px-4 py-3 rounded-xl font-medium text-[var(--text-primary)] hover:bg-gradient-to-r hover:from-[var(--accent-primary)] hover:to-[var(--accent-secondary)] hover:text-white group"
                    onClick={() => setIsMobileMenuOpen(false)}
                  >
                    <span className="text-[var(--accent-primary)] group-hover:text-white">
                      {item.icon}
                    </span>
                    <span className="text-lg">{item.label}</span>
                  </a>
                ))}
              </nav>
              <div className="mt-6 pt-6 border-t border-[var(--card-border)]">
                <button
                  onClick={() => {
                    setIsMobileMenuOpen(false);
                    setShowCalendly(true);
                  }}
                  className="w-full flex items-center justify-center gap-2 p-4 rounded-xl font-semibold text-white bg-gradient-to-r from-[var(--accent-primary)] to-[var(--accent-secondary)]"
                >
                  <Calendar size={20} />
                  Schedule a Call
                </button>
                <div className="mt-6 text-center">
                  <p className="text-sm text-[var(--text-secondary)] mb-4">Switch Theme</p>
                  <ThemeToggleButton />
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
      {/* Desktop Floating Navigation */}
      {isScrolled && (
        <nav className="hidden md:block fixed bottom-8 left-1/2 z-50 -translate-x-1/2 ">
          <div className="flex items-center gap-2 p-2 rounded-2xl backdrop-blur-lg border border-[var(--card-border)] bg-[var(--card-bg)] shadow-lg">
            {navItems.map((item) => (
              <a
                key={item.label}
                href={item.href}
                className="flex items-center gap-2 px-4 py-2 rounded-xl font-medium text-[var(--text-secondary)] hover:text-white transition-all duration-200 hover:bg-gradient-to-r hover:from-[var(--accent-primary)] hover:to-[var(--accent-secondary)] group"
              >
                <span className="text-[var(--accent-primary)] group-hover:text-white">
                  {item.icon}
                </span>
                <span className='text-nowrap'>{item.label}</span>
              </a>
            ))}
            <div className="w-px h-6 bg-[var(--card-border)]" />
            <span className="px-2">
              <ThemeToggleButton />
            </span>
            <button
              onClick={handleCalendlyClick}
              className="ml-2 flex items-center gap-2 px-4 py-2 rounded-xl font-medium text-white bg-gradient-to-r from-[var(--accent-primary)] to-[var(--accent-secondary)] hover:shadow-lg transition-all duration-200"
            >
              <Calendar size={20} />
              <span className='text-nowrap'>Book a Call</span>
            </button>
          </div>
        </nav>
      )}
      {/* Calendly Modal */}
      {showCalendly && (
        <div className="fixed inset-0 bg-black/60 flex justify-center items-center z-50">
          <div className="relative w-full max-w-3xl h-[600px] bg-white rounded-lg overflow-hidden">
            <button
              onClick={() => setShowCalendly(false)}
              className="absolute top-4 right-4 text-gray-800 hover:text-red-600 text-3xl font-bold"
            >
              Ã—
            </button>
            <iframe
              src="https://calendly.com/ranjanashish9992/strategy-call?embed_domain=yourdomain.com&embed_type=Inline"
              width="100%"
              height="100%"
              frameBorder="0"
              title="Calendly Scheduler"
            />
          </div>
        </div>
      )}
    </>
  );
};

export default Header;